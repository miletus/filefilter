PACKAGE DOCUMENTATION

package filefilter
    import "filefilter"

    filefilter uses regular expressions to transform input files to output
    files. This file has command line processing for both flags and
    input/output files. ProcessFlags should be called at the beginning of
    main() in order to process the command line.

    filefilter will process a file (or any io.Reader) by applying regular
    expression based "filters" to the file. A filefilter.Filter has both the
    regular expression and the code to process matches to the regex. The
    ProcessText method takes an data source, breaks it into chunks and
    passes each chunk to applyFilters. applyFilters matches each Filter
    object against the chunk and writes the text from Filter with the
    earliest match.


VARIABLES

var EchoMh = func(indicies []int, text []byte) (outText []byte, err error) {

    if len(indicies) < 2 || indicies[0] < 0 || indicies[0] > indicies[1] || indicies[1] > len(text) {
        return nil, errors.New("Invalid indicies argument!")
    }
    return text[indicies[0]:indicies[1]], nil
}
    EchoMh is a MatchHandler whose outText is equal to the text that was
    matched with with the regular expression.

var ErrShortBuffer error = errors.New("Short Buffer")
    ErrShortBUffer means that the internal buffer is too small to hold a
    complete line from the reader.


FUNCTIONS

func GetBufferSize() int64
    GetBufferSize returns the buffer size specified on the command line, or
    its default value. The buffer size is in number of bytes, so have to
    convert from the command line argument which is in KB.

func GetEol() string
    Get the end-of-line character.

func GetExcludes() []string
    GetExcludes returns the regular expressions strings specified by the
    exclude flag.

func GetFilesFromCommandLine() (infile *os.File, outfile *os.File, err error)
    Get the input and output files from the command line.

func GetIncludes() []string
    GetIncludes returns the regular expressions strings specified by the
    include flag.

func IsVerbose() bool

func ProcessFlags()
    Parse the command line for flags and process the flags. If the command
    line has the help flag, help will be printed followed by os.Exit().

func ProcessText(reader io.Reader, output io.Writer, filters []*Filter, defaultFilter *Filter, bufferSize int64) (err error)
    ProcessText will apply the filters to the input data buffer by buffer
    and write the result to the writer. reader is the source of the input
    text output The text output from the filters will be written to output.
    filters the Filters to apply to the text. defaultFilter will be applied
    if none of the others filters matches the section of the input that is
    currently being matched. defaultFilter can be nil. bufferSize is the
    size of the buffer in bytes to use for i/o.

func SetLineSeparator(newLineSeparator string)
    Change the lineSeparator used by the homerLog routines. This must be
    called before you create your Filters.


TYPES

type Filter struct {
    NLines int "The number of lines this regular expression will match."
    // contains filtered or unexported fields
}
    Filter has a regular expression and the MatchHandler function to execute
    on the submatches or groups matched by that regular expression. See its
    Next method.


func NewFilter(expr string, mh MatchHandler) (*Filter, error)
    NewFilter creates a new Filter object. expr is the regular expression
    string to use for matching. Use defaultLineSeparator as the line ending
    in the regular expression string. They will be replaced by lineSeparator
    before the regular expression is applied. MatchHandler takes the output
    of a FindStringSubmatchIndex match and produces a []byte as output.


func NewPassAllFilter() (*Filter, error)
    NewPassAllFilter creates a filter that matches a complete line and will
    return that line from Filter.Next. It's main use is as the default
    filter


func (filter *Filter) Next(text []byte) (*FilterMatch, error)
    Next finds the first bytes that match with
    filter.regex.FindSubmatchIndex and then passes the match to filter.mh
    for processing. Next returns a FilterMatch structure with the beginning
    and end of the bytes matched by the regex and the text produced by the
    Filter's MatchHandler. If no match is found then the return will be nil.


type FilterMatch struct {
    // contains filtered or unexported fields
}
    FilterMatch is a structure used for returning a match from Filter.Next.



type MatchHandler func(indicies []int, text []byte) (outText []byte, err error)
    MatchHandler is a function used in a Filter object. The MatchHandler
    takes the match to the regular expression and produces output text. The
    indicies passed to the MatchHandler come from a Regexp.FindSubmatchIndex
    call in the Filter.




SUBDIRECTORIES

	Examples

